datasource db {
  url      = env("DATABASE_URL")
  provider = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id        String      @id @default(uuid())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  picture   String?

  Organization Organization[]

  SubOrganization SubOrganization[]

  OrgUsers OrgUsers[]
}

model Organization {
  org_id Int @id @default(autoincrement())
  org_external_name String
  org_internal_name String
  user_id String
  created_at DateTime @default(now())
  update_at DateTime @default(now()) @updatedAt
   user User @relation(fields: [user_id],references: [user_id])

  SubOrganization SubOrganization[]
  OrgServices OrgServices[]

  SubOrgServices SubOrgServices[]

  Customer Customer[]

  CustomerTypes CustomerTypes[]

  CustomerTypeMapper CustomerTypeMapper[]
}

model SubOrganization{
  sub_org_id Int @id @default(autoincrement())
  sub_external_name String 
  org_id Int
  user_id String
  created_at DateTime @default(now())

  updated_at DateTime @default(now()) @updatedAt
  org Organization @relation(fields: [org_id],references: [org_id])
  user User @relation(fields: [user_id],references: [user_id])
}
enum SERVICETYPE{
  TICKETING
  TABLE
  PRODUCT
}

// Services
model Services{
  service_id Int @id @default(autoincrement())
  service_internal_name String
  service_external_name String 
  service_descp String?
  service_icon String?
  service_type SERVICETYPE @default(PRODUCT)
  order_no Int @default(0)
  disable Boolean @default(true)
  created_at DateTime @default(now())
  updated_At DateTime @updatedAt @default(now())

  OrgServices OrgServices[]
} 


model OrgServices {
  org_service_id String @id @default(uuid())
  service_id Int 
  service_type SERVICETYPE 
  org_user_id Int 
  org_id Int 
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  org Organization @relation(fields: [org_id],references: [org_id])
  org_user OrgUsers @relation(fields: [org_user_id],references: [org_user_id])
  service Services @relation(fields: [service_id],references: [service_id])

  SubOrgServices SubOrgServices[]
}

model SubOrgServices {
  sub_org_service_id String @id @default(uuid())
  org_service_id String
  org_id Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  org_service OrgServices @relation(fields: [org_service_id],references: [org_service_id])
  org Organization @relation(fields: [org_id],references: [org_id])
}

model OrgUsers {
  org_user_id Int @id @default(autoincrement())
  org_id Int 
  user_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  OrgServices OrgServices[]
  user User @relation(fields: [user_id],references: [user_id])

  Customer Customer[]

  CustomerTypes CustomerTypes[]

  CustomerTypeMapper CustomerTypeMapper[]
}
model CustomerTypes {
  customer_type_id Int @id @default(autoincrement())
  customer_type String
  is_final Boolean
  org_id Int
  org_user_id Int
  org Organization @relation(fields: [org_id],references: [org_id])
  org_user OrgUsers @relation(fields: [org_user_id],references: [org_user_id])

  CustomerTypeMapper CustomerTypeMapper[]
}

model Customer {
  customer_id String @id @default(uuid())
  customer_name String
  first_name String
  last_name String
  email String
  phone String
  company_name String
  gst_number String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  org_id Int 
  org_user_id Int
  org Organization @relation(fields: [org_id],references: [org_id])
  org_user OrgUsers @relation(fields: [org_user_id],references: [org_user_id])
  CustomerAddressMapper CustomerAddressMapper[]

  CustomerTypeMapper CustomerTypeMapper[]
}

model CustomerTypeMapper {
  id Int @id @default(autoincrement())
  customer_id String
  customer_type_id Int
  customer_status Boolean
  customer Customer @relation(fields: [customer_id],references: [customer_id])
  customer_type CustomerTypes @relation(references: [customer_type_id],fields: [customer_type_id])
   org_id Int 
  org_user_id Int
  org Organization @relation(fields: [org_id],references: [org_id])
  org_user OrgUsers @relation(fields: [org_user_id],references: [org_user_id])
 
}

model CustomerAddressMapper{
  id Int @id @default(autoincrement())
  customer_id String
  address_id Int
  current_address Boolean
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  customer Customer @relation(fields: [customer_id],references: [customer_id])
  address AddressInfo @relation(fields: [address_id],references: [address_id])
}

model AddressInfo {
  address_id Int @id @default(autoincrement())
  street_name String?
  street_number String?
  landmark String?
  city String?
  state String?
  country String?
  zipcode String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  CustomerAddressMapper CustomerAddressMapper[]
}